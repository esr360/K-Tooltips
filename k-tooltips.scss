//=================================================================
// K-Tooltips
// https://github.com/esr360/K-Tooltips
//=================================================================

// Default/Configurable Settings
//-----------------------------------------------------------------

$tooltip-options: (
	// Size & Appearance
	max-width      : 500px,
	padding        : 1em,
	distance       : -1em,
	background     : rgba(0, 0, 0, 0.75),
	border-radius  : 0.25em,
	arrow-size     : 0.5em,
	arrow-color    : rgba(0, 0, 0, 0.75),
	// Typography
	font-size      : 1em,
	color          : white,
	text-transform : none,
	font-weight    : normal,
	// Other
	transition     : 0.4s,
	z-index        : 9999
);

// Custom Styles
//-----------------------------------------------------------------

$tooltip-styles: (
	light: (
		background     : rgba(white, 0.8),
		color          : #444,
		arrow-color    : rgba(white, 0.8)
	),
	demo-style-1: (
		distance       : -3em,
		background     : #34DDDD,
		border-radius  : 1em,
		arrow-size     : 1em,
		arrow-color    : #34DDDD,
		text-transform : uppercase,
		transition     : 0s
	),
	demo-style-2: (
		background     : linear-gradient(to bottom, #00dbdb 0%, #258dc8 100%),
		border-radius  : 0,
		arrow-color    : #258dc8,
		transition     : 1.6s
	)
);

// Positions
//-----------------------------------------------------------------

$tooltip-positions: (
	top, bottom, left, right
);
		
// Utilities
//-----------------------------------------------------------------

@function tooltip($tooltip-option) {
    @return map-get($tooltip-options, $tooltip-option);
}

@function tooltip-custom($custom-key) {
	@return map-get(map-get($tooltip-styles, $custom-style), $custom-key);
}

// CSS Triangle
//-----------------------------------------------------------------

@mixin triangle-core {
	&:after {
		content:'';
		position: absolute;
		width: 0;
		height: 0;
	}
}

@mixin triangle(
	$position: $tooltip-position, 
	$color: tooltip(arrow-color),
	$size: tooltip(arrow-size)
) {
	
	&:after {
		margin-left: -$size;
		@if $position == top {
			top: 100%;
			left: 50%;
			border-left: solid $size transparent;
			border-right: solid $size transparent;
			border-top: solid $size $color;
		} @else if $position == bottom {
			bottom: 100%;
			left: 50%;
			border-left: solid $size transparent;
			border-right: solid $size transparent;
			border-bottom: solid $size $color;
		} @else if $position == left {
			top: 50%;
			right: -$size;
			transform: translateY(-50%);
			border-top: solid $size transparent;
			border-bottom: solid $size transparent;
			border-left: solid $size $color;
		} @else if $position == right {
			top: 50%;
			right: 100%;
			transform: translateY(-50%);
			border-top: solid $size transparent;
			border-bottom: solid $size transparent;
			border-right: solid $size $color;
		}
	}
}
		
// Tooltip
//-----------------------------------------------------------------

[data-tooltip] {	
	
	@at-root .tooltip-container & {		
		position: relative;
		cursor: pointer;
	}
	
	@at-root [class*="tooltip-wrapper"] {
		text-align: center;
	}
	
	@at-root .tooltip-content {
		
		// Size & Appearance
		max-width: tooltip(max-width);
		padding: tooltip(padding);
		background: tooltip(background);
		border-radius: tooltip(border-radius);
		position: absolute;
		display: inline-block;
		
		// Typography
		font-size: tooltip(font-size);
		color: tooltip(color);
		text-transform: tooltip(text-transform);
		font-weight: tooltip(font-weight);
		
		// Other
		transition: tooltip(transition);
		z-index: tooltip(z-index);
		white-space: pre-wrap;
		
		// Hide by default
		opacity: 0;
		visibility: hidden;
		
		// Show when parent component is hovered
        [data-tooltip]:hover & {
			opacity: 1;
			visibility: visible;
        }
		
		// Direction Arrow
		@include triangle-core;
		
		// Positions
		@each $tooltip-position in $tooltip-positions {
			[class*="tooltip-wrapper"][class*="-#{$tooltip-position}"] & {
				#{$tooltip-position}: tooltip(distance);
				@include triangle(#{$tooltip-position});
				@if $tooltip-position == top {
					transform: translateX(-50%) translateY(-100%);
				} @else if $tooltip-position == bottom {
					transform: translateX(-50%) translateY(100%);
				} @else if $tooltip-position == left {
					top: 50%;
					transform: translateX(-100%) translateY(-50%);
				} @else if $tooltip-position == right {
					top: 50%;
					transform: translateX(100%) translateY(-50%);
				}
			}	
		}
		
		// Custom Styles
		@each $tooltip-style in $tooltip-styles {
			
		 	$custom-style: nth($tooltip-style, 1) !global;
			 
			[class*="tooltip-wrapper"][class*="-#{$custom-style}"] & {
		
				$tooltip-options: map-remove($tooltip-options, "distance", "arrow-size");
				
				@each $tooltip-position in $tooltip-positions {
					@at-root [class*="-#{$tooltip-position}"][class*="-#{$custom-style}"] .tooltip-content {
						#{$tooltip-position}: tooltip-custom(distance);
						@include triangle(#{$tooltip-position}, #{tooltip-custom(arrow-color)});
					}	
				}
				
				@each $tooltip-option in $tooltip-options {
					$custom-key: nth($tooltip-option, 1);
					$custom-value: tooltip-custom($custom-key);
					@if map-has-key(map-get($tooltip-styles, $custom-style), $custom-key) {
						#{$custom-key}: #{$custom-value} !important;
					}
				}
				
			}
				
		} // @tooltip-styles
		
	} // .tooltip-content
	
} // [data-tooltip]